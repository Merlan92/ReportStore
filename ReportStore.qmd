---
title: 'My First Project'
format: dashboard
echo: false
---

```{python}

#| echo: false
import folium
import requests
import pandas as pd
from IPython.display import display
from PIL import Image
import matplotlib.pyplot as plt
import itables
import itables.options as opt
from itables import show
from io import BytesIO

df = pd.read_excel("DF-Set.xlsx")

```

# Description



```{python}
#| title: Hello it`s my first project
url = "https://avatars.mds.yandex.net/i?id=3bc82374755bb30223c63a09b5977c4aa04551f4-12615842-images-thumbs&n=13.jpeg"
response = requests.get(url)
img = Image.open(BytesIO(response.content))

display(img)  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

```


# Listing Details


```{python}

#| echo: false
import pandas as pd
from itables import show
df = pd.read_excel("DF-Set.xlsx")

df['status'] = df['status'].astype(str).replace({'True': '–ê–∫—Ç–∏–≤–µ–Ω', 'False': '–ù–µ –ê–∫—Ç–∏–≤–µ–Ω'})
df['type'] = df['id'].apply(lambda x: 'OR' if sum(c.isalpha() for c in str(x)) >= 2 else 'IR')
output_df = df[['organisation', 'status', 'type', 'id', 'region', 'city']].reset_index(drop=True)
```


```{python}
import pandas as pd
from itables import show

# –ß–∏—Ç–∞–µ–º Excel-—Ñ–∞–π–ª
df = pd.read_excel("DF-Set.xlsx")

# –ó–∞–º–µ–Ω—è–µ–º True/False –Ω–∞ "–ê–∫—Ç–∏–≤–µ–Ω"/"–ù–µ –ê–∫—Ç–∏–≤–µ–Ω"
df['status'] = df['status'].astype(str).replace({'True': '–ê–∫—Ç–∏–≤–µ–Ω', 'False': '–ù–µ –ê–∫—Ç–∏–≤–µ–Ω'})

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø (OR/IR)
df['type'] = df['id'].apply(lambda x: 'OR' if sum(c.isalpha() for c in str(x)) >= 2 else 'IR')

# –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
output_df = df[['status', 'organisation', 'type', 'id', 'region', 'city']].reset_index(drop=True)

# –ü—Ä–∏–º–µ–Ω—è–µ–º Title Case –∫ —Å—Ç—Ä–æ–∫–æ–≤—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
text_columns = ['status', 'organisation', 'type', 'region', 'city']
output_df[text_columns] = output_df[text_columns].apply(lambda col: col.astype(str).str.title())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É
def highlight_status(row):
    color = 'white' if row['status'] == '–ê–∫—Ç–∏–≤–µ–Ω' else 'lightblue'
    return [f'background-color: {color}; color: black; font-weight: normal;' for _ in row]

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
styled_df = output_df.style.apply(highlight_status, axis=1).set_table_styles([
    {"selector": "table", "props": [("background-color", "#f0f0f0"),  # –§–æ–Ω –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                                    ("border", "2px solid black"),
                                    ("width", "100%")]},
    {"selector": "th", "props": [("background-color", "#333"),  # –§–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                                 ("color", "white"),
                                 ("font-size", "16px"),
                                 ("text-align", "center")]}
])

show(styled_df)
```


# Main

## {height=10%}


```{python}
#| content: valuebox
#| title: "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã"
#| echo: false
dict(
    icon="house",
    color="danger",
    value=int(df['status'].eq('–ù–µ –ê–∫—Ç–∏–≤–µ–Ω').sum())  # eq() - –∞–Ω–∞–ª–æ–≥ (df['status'] == '–ù–µ –ê–∫—Ç–∏–≤–µ–Ω')
)
```

```{python}
#| content: valuebox
#| title: "–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã"
#| echo: false
dict(
    icon="house",
    color="success",
    value=int(df['status'].eq('–ê–∫—Ç–∏–≤–µ–Ω').sum())  
)
```


# View Pie

```{python}
#| echo: false
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_excel("DF-Set.xlsx")

status_counts = df['status'].value_counts()
colors = ['blue', 'red']
labels = ['Active', 'UnActive']

plt.figure(figsize=(8, 8))
plt.pie(
    status_counts, 
    labels=labels, 
    autopct='%1.1f%%', 
    startangle=140, 
    colors=colors,
    wedgeprops={'edgecolor': 'black'})

plt.title('Percentage of Active and UnActive Stores', fontsize=16, fontweight='bold')
plt.show();
```

```{python}
#| echo: false
#| title: Active UnActive Shops
df = pd.read_excel("DF-Set.xlsx")

region_active_status = df.groupby(['region', 'status'])['id'].count().unstack(fill_value=0)

colors = ['red', 'blue']

ax = region_active_status.plot(
    kind='bar',
    stacked=False,
    color=colors,
    figsize=(13, 8),
    edgecolor='black',
    width=0.8
)

for container in ax.containers:
    ax.bar_label(container, fmt='%d', fontsize=12, padding=3)


plt.title('Active and UnActive Stores by Region', fontsize=16, fontweight='bold')
plt.xlabel('Region', fontsize=14)
plt.ylabel('Count of Stores', fontsize=14)
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)
plt.legend(['–ù–µ –ê–∫—Ç–∏–≤–Ω—ã', '–ê–∫—Ç–∏–≤–Ω—ã–∫'], title='Status', fontsize=12)
plt.tight_layout()

plt.show();
```

# Store in the Map


```{python}
#| echo: false

from IPython.display import display
import pandas as pd
import folium
from folium.plugins import Search

df = pd.read_excel("DF-Set.xlsx")

if df.empty:
    print("DataFrame is empty, creating a default map.")
    my_map = folium.Map(location=[41.3775, 64.5853], zoom_start=5)
else:
    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    df = df.dropna(subset=['lat', 'long'])

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —á–∏—Å–ª–∞ –∏ –∑–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ 0
    df['lat'] = pd.to_numeric(df['lat'], errors='coerce').fillna(0)
    df['long'] = pd.to_numeric(df['long'], errors='coerce').fillna(0)

    # –£–±–∏—Ä–∞–µ–º NaN –≤ store –∏ region
    df['id'] = df['id'].fillna("N/A").astype(str)
    df['region'] = df['region'].fillna("Unknown").astype(str)

    # –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–Ω–∞—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    map_center = [
        df['lat'].mean() if df['lat'].sum() != 0 else 41.3775,
        df['long'].mean() if df['long'].sum() != 0 else 64.5853
    ]
    my_map = folium.Map(location=map_center, zoom_start=5)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã
    marker_group = folium.FeatureGroup(name="Stores").add_to(my_map)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
    color_map = {True: "green", False: "red"}

    for _, row in df.iterrows():
        store_status = row['status']  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞–≥–∞–∑–∏–Ω–∞
        marker_color = color_map.get(store_status, "gray")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ—Ä—ã–π

        _ = folium.Marker(
              location=[row['lat'], row['long']],
              popup=folium.Popup(
          f"""
          <div style="
              font-family: Arial, sans-serif;
              font-size: 14px;
              color: #333;
              padding: 8px;
              border-radius: 8px;
              # box-shadow: 2px 2px 5px rgba(0,0,0,0.3);
              background: #fff;
              width: 200px;
          ">
              <b>ID –ú–∞–≥–∞–∑–∏–Ω–∞:</b> {row['id']}<br>
              <b>–ö–ª–∏–µ–Ω—Ç:</b> {row['organisation']}<br>
              <b>–†–µ–≥–∏–æ–Ω:</b> {row['region']}<br>
              <b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π' if store_status else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}
          </div>
          """,
          max_width=250
    ),
    # tooltip=f"–ú–∞–≥–∞–∑–∏–Ω {row['id']}, –†–µ–≥–∏–æ–Ω: {row['region']}",
    icon=folium.Icon(color=marker_color,icon='home'),
    name=row['id']
).add_to(marker_group)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ ID –º–∞–≥–∞–∑–∏–Ω–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å FeatureGroup)
    search = Search(
        layer=marker_group,
        search_label="name",
        placeholder="–ü–æ–∏—Å–∫ –ø–æ ID –º–∞–≥–∞–∑–∏–Ω–∞",
        collapsed=False
    ).add_to(my_map);

my_map

```


