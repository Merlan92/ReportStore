---
title: 'My First Project'
format: dashboard
echo: false
---

```{python}
#| echo: false
import folium
import requests
import pandas as pd
from IPython.display import display
from PIL import Image
import matplotlib.pyplot as plt
import itables
import itables.options as opt
from itables import show
from io import BytesIO

df = pd.read_excel("DF-Set.xlsx")

```

# Description



```{python}
#| title: Hello it`s my first project
url = "https://avatars.mds.yandex.net/i?id=3bc82374755bb30223c63a09b5977c4aa04551f4-12615842-images-thumbs&n=13.jpeg"
response = requests.get(url)
img = Image.open(BytesIO(response.content))

display(img)  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

```


# Listing Details


```{python}

#| echo: false
import pandas as pd
from itables import show
df = pd.read_excel("DF-Set.xlsx")

df['status'] = df['status'].astype(str).replace({'True': '–ê–∫—Ç–∏–≤–µ–Ω', 'False': '–ù–µ –ê–∫—Ç–∏–≤–µ–Ω'})
df['type'] = df['id'].apply(lambda x: 'OR' if sum(c.isalpha() for c in str(x)) >= 2 else 'IR')
output_df = df[['organisation', 'status', 'type', 'id', 'region', 'city']].reset_index(drop=True)
```


```{python}
import pandas as pd
from itables import show

# –ß–∏—Ç–∞–µ–º Excel-—Ñ–∞–π–ª
df = pd.read_excel("DF-Set.xlsx")

# –ó–∞–º–µ–Ω—è–µ–º True/False –Ω–∞ "–ê–∫—Ç–∏–≤–µ–Ω"/"–ù–µ –ê–∫—Ç–∏–≤–µ–Ω"
df['status'] = df['status'].astype(str).replace({'True': '–ê–∫—Ç–∏–≤–µ–Ω', 'False': '–ù–µ –ê–∫—Ç–∏–≤–µ–Ω'})

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø (OR/IR)
df['type'] = df['id'].apply(lambda x: 'OR' if sum(c.isalpha() for c in str(x)) >= 2 else 'IR')

# –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
output_df = df[['status', 'organisation', 'type', 'id', 'region', 'city']].reset_index(drop=True)

# –ü—Ä–∏–º–µ–Ω—è–µ–º Title Case –∫ —Å—Ç—Ä–æ–∫–æ–≤—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
text_columns = ['status', 'organisation', 'type', 'region', 'city']
output_df[text_columns] = output_df[text_columns].apply(lambda col: col.astype(str).str.title())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É
def highlight_status(row):
    color = 'white' if row['status'] == '–ê–∫—Ç–∏–≤–µ–Ω' else 'lightblue'
    return [f'background-color: {color}; color: black; font-weight: normal;' for _ in row]

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
styled_df = output_df.style.apply(highlight_status, axis=1).set_table_styles([
    {"selector": "table", "props": [("background-color", "#f0f0f0"),  # –§–æ–Ω –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
                                    ("border", "2px solid black"),
                                    ("width", "100%")]},
    {"selector": "th", "props": [("background-color", "#333"),  # –§–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                                 ("color", "white"),
                                 ("font-size", "16px"),
                                 ("text-align", "center")]}
])

show(styled_df)
```


# Main

## {height=10%}


```{python}
#| content: valuebox
#| title: "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã"
#| echo: false
dict(
    icon="house",
    color="danger",
    value=int(df['status'].eq('–ù–µ –ê–∫—Ç–∏–≤–µ–Ω').sum())  # eq() - –∞–Ω–∞–ª–æ–≥ (df['status'] == '–ù–µ –ê–∫—Ç–∏–≤–µ–Ω')
)
```

```{python}
#| content: valuebox
#| title: "–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã"
#| echo: false
dict(
    icon="house",
    color="success",
    value=int(df['status'].eq('–ê–∫—Ç–∏–≤–µ–Ω').sum())  
)
```


# View Pie



```{python}
#| echo: false
#| title: Active Shops
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_excel("DF-Set.xlsx")

status_counts = df['status'].value_counts()
colors = ['blue', 'red']
labels = ['Active', 'UnActive']

plt.figure(figsize=(8, 8))
plt.pie(
    status_counts, 
    labels=labels, 
    autopct='%1.1f%%', 
    startangle=140, 
    colors=colors,
    wedgeprops={'edgecolor': 'black'})

plt.title('Percentage of Active and UnActive Stores', fontsize=16, fontweight='bold')
plt.show();
```

```{python}
#| echo: false
#| title: Active UnActive Shops
df = pd.read_excel("DF-Set.xlsx")

region_active_status = df.groupby(['region', 'status'])['id'].count().unstack(fill_value=0)

colors = ['red', 'blue']

ax = region_active_status.plot(
    kind='bar',
    stacked=False,
    color=colors,
    figsize=(13, 8),
    edgecolor='black',
    width=0.8
)

for container in ax.containers:
    ax.bar_label(container, fmt='%d', fontsize=12, padding=3)


plt.title('Active and UnActive Stores by Region', fontsize=16, fontweight='bold')
plt.xlabel('Region', fontsize=14)
plt.ylabel('Count of Stores', fontsize=14)
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)
plt.legend(['–ù–µ –ê–∫—Ç–∏–≤–Ω—ã', '–ê–∫—Ç–∏–≤–Ω—ã–∫'], title='Status', fontsize=12)
plt.tight_layout()

plt.show();
```

# Store in the Map


```{python}
import pandas as pd
import ipyleaflet as L
from ipywidgets import HTML
import folium
from folium.plugins import Search
import pandas as pd

df = pd.DataFrame({
    "id": [1, 2],
    "organisation": ["Store A", "Store B"],
    "region": ["Tashkent", "Samarkand"],
    "lat": [41.2798, 39.6543],
    "long": [69.2187, 66.9755],
    "status": ["–ê–∫—Ç–∏–≤–µ–Ω", "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"]
})

if df.empty:
    my_map = folium.Map(location=[41.3775, 64.5853], zoom_start=5)
else:
    df = df.dropna(subset=['lat', 'long'])
    df['lat'] = pd.to_numeric(df['lat'], errors='coerce').fillna(0)
    df['long'] = pd.to_numeric(df['long'], errors='coerce').fillna(0)

    map_center = [
        df['lat'].mean() if df['lat'].sum() != 0 else 41.3775,
        df['long'].mean() if df['long'].sum() != 0 else 64.5853
    ]
    my_map = folium.Map(location=map_center, zoom_start=10)

    marker_group = folium.FeatureGroup(name="Stores").add_to(my_map)

    color_map = {'–ê–∫—Ç–∏–≤–µ–Ω': "green", '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω': "red"}

    for _, row in df.iterrows():
        store_status = row['status']
        marker_color = color_map.get(store_status, "gray")

        folium.Marker(
            location=[row['lat'], row['long']],
            popup=f"""
                <div style="font-family: Arial, sans-serif; font-size: 14px; color: #333; padding: 8px; border-radius: 8px; background: #fff; width: 200px;">
                    <b>ID –ú–∞–≥–∞–∑–∏–Ω–∞:</b> {row['id']}<br>
                    <b>–ö–ª–∏–µ–Ω—Ç:</b> {row['organisation']}<br>
                    <b>–†–µ–≥–∏–æ–Ω:</b> {row['region']}<br>
                    <b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π' if store_status == '–ê–∫—Ç–∏–≤–µ–Ω' else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}
                </div>
            """,
            icon=folium.Icon(color=marker_color, icon='home'),
            name=row['id']
        ).add_to(marker_group)

    Search(
        layer=marker_group,
        search_label="name",
        placeholder="–ü–æ–∏—Å–∫ –ø–æ ID –º–∞–≥–∞–∑–∏–Ω–∞",
        collapsed=False
    ).add_to(my_map)


google_maps_iframe = """
<iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d47973.35329391476!2d69.21868927975349!3d41.279822169247296!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x38aef54ef91ad413%3A0x244d8781fc34c779!2sBM%20ELECTRONICS!5e0!3m2!1sen!2s!4v1737027720668!5m2!1sen!2s"
        width="100%" height="300px" style="border:0;" allowfullscreen="" loading="lazy"></iframe>
"""

iframe = folium.IFrame(google_maps_iframe, width=500, height=350)
popup = folium.Popup(iframe, max_width=600)
folium.Marker([41.2798, 69.2187], popup=popup, icon=folium.Icon(color="blue", icon="cloud")).add_to(my_map)

my_map.save("map.html")

```

```{python}
import pandas as pd
from IPython.core.display import display, HTML

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
file_path = ("DF-Set.xlsx")
df = pd.read_excel(file_path)

df['status'] = df['status'].astype(str).replace({'True': '–ê–∫—Ç–∏–≤–µ–Ω', 'False': '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'})

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
df = df.dropna(subset=['lat', 'long'])
df['lat'] = pd.to_numeric(df['lat'], errors='coerce').fillna(0)
df['long'] = pd.to_numeric(df['long'], errors='coerce').fillna(0)

# –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã (—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
map_center = [df['lat'].mean(), df['long'].mean()]

# –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
markers = "".join([
    f"&markers=color:{'green' if row['status'] == '–ê–∫—Ç–∏–≤–µ–Ω' else 'red'}%7C{row['lat']},{row['long']}"
    for _, row in df.iterrows()
])

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL Google Maps Static API
google_maps_url = (
    f"https://maps.googleapis.com/maps/api/staticmap?center={map_center[0]},{map_center[1]}"
    f"&zoom=10&size=800x600&maptype=roadmap{markers}"
    f"&key=YOUR_GOOGLE_MAPS_API_KEY"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API-–∫–ª—é—á
)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É –≤ –ø—Ä–æ–µ–∫—Ç–µ QMD
display(HTML(f'<img src="{google_maps_url}" style="width:100%; max-width:800px;" />'))

```
