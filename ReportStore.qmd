---
title: 'My First Project'
format: dashboard
echo: false
---

```{python}
#| echo: false
import folium
import requests
import pandas as pd
from IPython.display import display
from PIL import Image
import matplotlib.pyplot as plt
import itables
import itables.options as opt
from itables import show
from io import BytesIO

df = pd.read_excel("DF-Set.xlsx")
```

# Listing Details

```{python}
#| echo: false
df = pd.read_excel("DF-Set.xlsx")
df['status'] = df['status'].astype(str).replace({'True': '–ê–∫—Ç–∏–≤–µ–Ω', 'False': '–ù–µ –ê–∫—Ç–∏–≤–µ–Ω'})
df['type'] = df['id'].apply(lambda x: 'OR' if sum(c.isalpha() for c in str(x)) >= 2 else 'IR')
output_df = df[['organisation', 'status', 'type', 'id', 'region', 'city']].reset_index(drop=True)

```

```{python}

df['status'] = df['status'].astype(str).replace({'True': '–ê–∫—Ç–∏–≤–µ–Ω', 'False': '–ù–µ –ê–∫—Ç–∏–≤–µ–Ω'})
df['type'] = df['id'].apply(lambda x: 'OR' if sum(c.isalpha() for c in str(x)) >= 2 else 'IR')
output_df = df[['status', 'organisation', 'type', 'id', 'region', 'city']].reset_index(drop=True)
text_columns = ['status', 'organisation', 'type', 'region', 'city']
output_df[text_columns] = output_df[text_columns].apply(lambda col: col.astype(str).str.title())

def highlight_status(row):
    color = 'white' if row['status'] == '–ê–∫—Ç–∏–≤–µ–Ω' else 'lightblue'
    return [f'background-color: {color}; color: black; font-weight: normal;' for _ in row]

styled_df = output_df.style.apply(highlight_status, axis=1).set_table_styles([
    {"selector": "table", "props": [("background-color", "#f0f0f0"),  
                                    ("border", "2px solid black"),
                                    ("width", "100%")]},
    {"selector": "th", "props": [("background-color", "#333"),  
                                 ("color", "white"),
                                 ("font-size", "16px"),
                                 ("text-align", "center")]}
])

show(styled_df);
```
# Main

## –í–µ—Ä—Ö–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
```{python}
#| echo: false
#| layout-ncol: 2
#| content: valuebox
#| title: "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã"

dict(
    icon="house",
    color="danger",
    value=int(df['status'].eq('–ù–µ –ê–∫—Ç–∏–≤–µ–Ω').sum()) 
);
```

```{python}
#| echo: false
#| content: valuebox
#| title: "–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã"
dict(
    icon="house",
    color="success",
    value=int(df['status'].eq('–ê–∫—Ç–∏–≤–µ–Ω').sum())  
);
```



```{python}
#| echo: false
#| layout-ncol: 2 
#| title: Active Shops
import pandas as pd
import matplotlib.pyplot as plt

status_counts = df['status'].value_counts()
colors = ['blue', 'red']
labels = ['–ê–∫—Ç–∏–≤–Ω—ã–µ', '–ù–µ –ê–∫—Ç–∏–≤–Ω—ã–µ']

plt.figure(figsize=(8, 8))
plt.pie(
    status_counts, 
    labels=labels, 
    autopct='%1.1f%%', 
    startangle=140, 
    colors=colors,
    wedgeprops={'edgecolor': 'black'})

plt.title('Percentage of Active and InActive Stores', fontsize=16, fontweight='bold')
plt.show();
```

```{python}
#| echo: false
#| title: Active UnActive Shops

region_active_status = df.groupby(['region', 'status'])['id'].count().unstack(fill_value=0)

colors = ['blue', 'red']

ax = region_active_status.plot(
    kind='bar',
    stacked=False,
    color=colors,
    figsize=(13, 8),
    edgecolor='black',
    width=0.8
)

for container in ax.containers:
    ax.bar_label(container, fmt='%d', fontsize=12, padding=3)


plt.title('Active and InActive Stores by Region', fontsize=16, fontweight='bold')
plt.xlabel('Region', fontsize=14)
plt.ylabel('Count of Stores', fontsize=14)
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)
plt.legend(['–ê–∫—Ç–∏–≤–Ω—ã', '–ù–µ –ê–∫—Ç–∏–≤–Ω—ã–µ'], title='Status', fontsize=12)
plt.tight_layout()

plt.show();
```


# Tables Store
```{python}
#| echo: false
import itables.options

df_filtered = df[df['region'] == '–†–µ–≥–∏–æ–Ω']
summary = df.groupby('region')['status'].value_counts().unstack(fill_value=0)
summary.columns = ["–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", "–ê–∫—Ç–∏–≤–Ω—ã–µ"]

display(summary)
```

# Store in the Map
```{python}
#| echo: 
import pandas as pd
from IPython.display import display
import folium
from folium.plugins import Search, MarkerCluster


df = pd.read_excel("DF-Set.xlsx")
if df.empty:
    print("DataFrame –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–∞—Ä—Ç—É.")
    my_map = folium.Map(location=[41.3775, 64.5853], zoom_start=5)
else:
   
    required_columns = {'id', 'lat', 'long', 'status', 'organisation', 'region'}
    if not required_columns.issubset(df.columns):
        raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {required_columns - set(df.columns)}")

  
    df['lat'] = pd.to_numeric(df['lat'], errors='coerce')
    df['long'] = pd.to_numeric(df['long'], errors='coerce')

   
    df = df.dropna(subset=['lat', 'long'])
    df = df[df['lat'].between(-90, 90) & df['long'].between(-180, 180)]

    df['status'] = df['status'].astype(bool)
    df['id'] = df['id'].fillna("N/A").astype(str)
    df['region'] = df['region'].fillna("Unknown")


    map_center = [df['lat'].mean(), df['long'].mean()]
    my_map = folium.Map(location=map_center, zoom_start=5)

    marker_cluster = MarkerCluster().add_to(my_map)

    # –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
    def get_marker_color(status):
        return "green" if status else "red"

    searchable_markers = []

    for _, row in df.iterrows():
        marker_color = get_marker_color(row['status'])

        marker = folium.Marker(
            location=[row['lat'], row['long']],
            popup=folium.Popup(
                f"""
                <div style="font-family: Arial, sans-serif; font-size: 14px; padding: 8px;">
                    <b>–ö–ª–∏–µ–Ω—Ç:</b> {row['organisation']}<br>
                    <b>ID –ú–∞–≥–∞–∑–∏–Ω–∞:</b> {row['id']}<br>
                    <b>–†–µ–≥–∏–æ–Ω:</b> {row['region']}<br>
                    <b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π' if row['status'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}
                </div>
                """,
                max_width=250
            ),
            icon=folium.Icon(color=marker_color, icon='home'),
        )
        marker.add_to(marker_cluster)
        searchable_markers.append({"location": [row['lat'], row['long']], "id": row['id']})
    Search(
        layer=marker_cluster,  
        search_label="id", 
        placeholder="–í–≤–µ–¥–∏—Ç–µ ID –º–∞–≥–∞–∑–∏–Ω–∞",
        collapsed=False
    ).add_to(my_map)

display(my_map);
```
