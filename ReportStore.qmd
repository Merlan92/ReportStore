---
title: "My First Project"
format: 
  dashboard:
    layout: [1,1]
echo: false
---

# Data page

```{python}
#| echo: false
import folium
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import display
from itables import show
from folium.plugins import Search
from io import BytesIO
from PIL import Image
import requests

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
df = pd.read_excel("DF-Set.xlsx")
# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å
df['status'] = df['status'].astype(str).replace({'True': '–ê–∫—Ç–∏–≤–µ–Ω', 'False': '–ù–µ –ê–∫—Ç–∏–≤–µ–Ω'})
df['type'] = df['id'].apply(lambda x: 'OR' if sum(c.isalpha() for c in str(x)) >= 2 else 'IR')

# –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ Title Case
text_columns = ['status', 'organisation', 'type', 'region', 'city']
df[text_columns] = df[text_columns].apply(lambda col: col.astype(str).str.title())

# –ì–æ—Ç–æ–≤–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
output_df = df[['organisation', 'status', 'type', 'id', 'region', 'city']].reset_index(drop=True)

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
def highlight_status(row):
    color = 'white' if row['status'] == '–ê–∫—Ç–∏–≤–µ–Ω' else 'lightblue'
    return [f'background-color: {color}; color: black;' for _ in row]

styled_df = output_df.style.apply(highlight_status, axis=1)

```


# information about the received data


```{python}
#| content: valuebox
#| title: "–î–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤"
#| echo: false

show(styled_df);
```

```{python}
#| layout-nrow: 1
#| layout-ncol: 2

#| content: valuebox
#| title: "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã"
#| icon: house
#| color: red
dict(value=int(df['status'].eq('–ù–µ –ê–∫—Ç–∏–≤–µ–Ω').sum()));
```


```{python}
#| content: valuebox
#| title: "–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã"
#| icon: house
#| color: green
dict(value=int(df['status'].eq('–ê–∫—Ç–∏–≤–µ–Ω').sum()));

```

# Charts

```{python}
#| echo: false
status_counts = df['status'].value_counts()
colors = ['blue', 'red']
labels = ['–ê–∫—Ç–∏–≤–Ω—ã–µ', '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ']

plt.figure(figsize=(8, 8))
plt.pie(
    status_counts, 
    labels=labels, 
    autopct='%1.1f%%', 
    startangle=140, 
    colors=colors,
    wedgeprops={'edgecolor': 'black'}
)
plt.title('–ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤', fontsize=16, fontweight='bold')
plt.show();
```


```{python}

#| echo: false
region_active_status = df.groupby(['region', 'status'])['id'].count().unstack(fill_value=0)

colors = ['red', 'blue']

ax = region_active_status.plot(
    kind='bar',
    stacked=False,
    color=colors,
    figsize=(13, 8),
    edgecolor='black',
    width=0.8
)

for container in ax.containers:
    ax.bar_label(container, fmt='%d', fontsize=12, padding=3)

plt.title('–ê–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º', fontsize=16, fontweight='bold')
plt.xlabel('–†–µ–≥–∏–æ–Ω', fontsize=14)
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤', fontsize=14)
plt.xticks(rotation=45, fontsize=12)
plt.yticks(fontsize=12)
plt.legend(['–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ', '–ê–∫—Ç–∏–≤–Ω—ã–µ'], title='–°—Ç–∞—Ç—É—Å', fontsize=12)
plt.tight_layout()
plt.show();

```


# Map
```{python}
#| echo: false
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
if df.empty:
    my_map = folium.Map(location=[41.3775, 64.5853], zoom_start=5)
else:
    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    df = df.dropna(subset=['lat', 'long'])

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    df['lat'] = pd.to_numeric(df['lat'], errors='coerce').fillna(0)
    df['long'] = pd.to_numeric(df['long'], errors='coerce').fillna(0)

    # –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
    map_center = [
        df['lat'].mean() if df['lat'].sum() != 0 else 41.3775,
        df['long'].mean() if df['long'].sum() != 0 else 64.5853
    ]
    my_map = folium.Map(location=map_center, zoom_start=5)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã
    marker_group = folium.FeatureGroup(name="Stores").add_to(my_map)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
    color_map = {'–ê–∫—Ç–∏–≤–µ–Ω': "green", '–ù–µ –ê–∫—Ç–∏–≤–µ–Ω': "red"}

    for _, row in df.iterrows():
        store_status = row['status']
        marker_color = color_map.get(store_status, "gray")

        folium.Marker(
            location=[row['lat'], row['long']],
            popup=folium.Popup(
                f"""
                <div style="
                    font-family: Arial, sans-serif;
                    font-size: 14px;
                    color: #333;
                    padding: 8px;
                    border-radius: 8px;
                    background: #fff;
                    width: 200px;
                ">
                    <b>ID –ú–∞–≥–∞–∑–∏–Ω–∞:</b> {row['id']}<br>
                    <b>–ö–ª–∏–µ–Ω—Ç:</b> {row['organisation']}<br>
                    <b>–†–µ–≥–∏–æ–Ω:</b> {row['region']}<br>
                    <b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π' if store_status == '–ê–∫—Ç–∏–≤–µ–Ω' else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}
                </div>
                """,
                max_width=250
            ),
            icon=folium.Icon(color=marker_color, icon='home'),
            name=row['id']
        ).add_to(marker_group)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ ID –º–∞–≥–∞–∑–∏–Ω–∞
    Search(
        layer=marker_group,
        search_label="name",
        placeholder="–ü–æ–∏—Å–∫ –ø–æ ID –º–∞–≥–∞–∑–∏–Ω–∞",
        collapsed=False
    ).add_to(my_map)

display(my_map);

```
